[{"content":"Python Matplotlib绘图库介绍 安装库 没啥好说的，pip install 一下就行\npip install matplotlib 使用基础 import matplotlib.pyplot as plt 以下默认你已经安装好matplotlib库并都已经在新建的py文件中加入了以上调用这个库的命令\n最简单的使用命令，也就是一行x一行y的数字输入进plot函数。 下面一步一步讲解:\n首先先给x和y进行赋值，以以下的赋值操作为例\nx = [1,2,3,4,5,6,7] y = [1,0,-1,-2,-3,-4,-3] plt.plot(x,y) plt.show() 赋值完毕之后直接进行plot操作读入类似缓存区的位置，然后再由plt.show()输出包含着图表 (figure) 的窗口\n同时绘制多条直线？ x = [[1,2,3,4,5,6,7], [1,2,3,4,5,6,7]] y = [[1,0,-1,-2,-3,-4,-3], [1,2,3,4,5,6,8]] 没错，我第一反应也是这个，但把数据输入进去就知道不对劲了，我们按照这个方法把图输入进去\nplt.plot(x, y) plt.show() 但输出完就傻眼了，什么情况? 别急，仔细观察图表里，总共有6条线，刚好对应了列表x的长度-1,另一个1去哪里了？(1,1)和(1,1)重合了，变成点了 也就是说，先前预想的按照以下方法绘制的想法落空了,预想的是同时两列x,y一起绘制，，画出两条线\nx 1 2 3 4 5 6 7 y 1 0 -1 -2 -3 -4 -3 x 1 2 3 4 5 6 7 y 1 2 3 4 5 6 8 而现在则成了，左边两列的x和y分别表示作为一个点，跟右边两列也分别表示作为一个点，然后这两个点连起来\nx y x y 1 1 1 1 2 0 2 2 3 -1 3 3 4 -2 4 4 5 -3 5 5 6 -4 6 6 7 -3 7 8 好像比较麻烦？但没关系，numpy有矩阵转置功能 就是要先把x强制转成矩阵\n转矩阵后转置本身 先导入numpy包，一般取别名作np\nimport numpy as np 强制把x和y转为矩阵\nx = np.array(x) y = np.array(y) 然后把转置矩阵赋值给本身\nx = x.T y = y.T 如果你到python控制台做完这些去看x和y的结果就会得到类似下面的结果，y也相同，此时对x和y进行绘图操作就可以得到想要的图了\nprint(x) [[1 1] [2 2] [3 3] [4 4] [5 5] [6 6] [7 7]] 顺带一提，矩阵和包含数的列表都可以被matplotlib接收 此时plot(x,y)即可得到结果 不同区域显示？ plt库包含subplot功能，可以进行一张figure的多个区域的分割，用法则是,plt.subplot()结束表示在你表示的区域绘图 其中可以用简单的数字来表示，第一个数字表示把宽分隔成多少行,第二个数字表示把长分割成多少列，比如说plt.subplot(4,4,1)最后一个数表示 位置，其中三个数都小于9可以直接写在一起,plt.subplot(441)\nsubplot(441) subplot(445) 示例代码\nplt.subplot(4,4,5) plt.plot(x, y) plt.show() 也支持同时绘制\nplt.subplot(4,4,5) plt.plot(x, y) plt.subplot(4,4,1) plt.plot(x, y) plt.show() 这里别急着直接plt.show(),已有subplot()选中某块区域绘制的情况下，再有subplot等于是切换区域绘制 最后都绘制完了就可以plt.show()了\n更进阶的方法 plt.subplot2grid((3,3),(0,0),colspan=3,rowspan=1) plt.plot(x, y) plt.subplot(3,3,4) plt.plot(x, y) plt.show() 效果 利用subplot2grid函数也可以实现这一点，其中(3,3)是前面横竖分割，(0,0)表示起始位置，然后后两个参数表示从左上(0,0)往右下两个方向分别扩张的距离\n一些配置 # 图表标题 plt.title(\u0026#34;title1\u0026#34;) # x轴上的标签 plt.xlabel(\u0026#34;dB\u0026#34;) # y轴上的标签 plt.ylabel(\u0026#34;Hz\u0026#34;) # 打开网格(默认false) plt.grid(\u0026#34;true\u0026#34;) 其他绘制函数 散点图\nplt.scatter(x,y) plt.show() 效果 柱状图\nplt.bar(x,y) plt.show() 效果 读取图片展示在图表上，当时翻函数翻到了，没想到除了cv2，plt也有读入图片文件的函数\n# 需要当前目录有picture.png # 载入图片到img1变量 img1 = plt.imread(\u0026#34;picture.png\u0026#34;) # 把变量载入暂存区 plt.imshow(img1) # 展示图片 plt.show() ","date":"2025-02-07T19:00:05+08:00","image":"https://adeepblue.github.io/p/python-matplotlib%E7%BB%98%E5%9B%BE%E5%BA%93/matplotlib_hu_db27174f46f1de3.png","permalink":"https://adeepblue.github.io/p/python-matplotlib%E7%BB%98%E5%9B%BE%E5%BA%93/","title":"Python Matplotlib绘图库"},{"content":"图灵完备部分游戏攻略 前言 话说在前面，因为先前并没有开博客网站，我先前的内容，除非我再去玩一次，可能会再写记录，目前估计不打算写了 ,目前的进度如下图，已经造出了可以运行的计算机，也实现了简单的几个程序，以及开始了游戏内的汇编，会简单讲一下我造的计算机的布局， 我并不打算多看教程，基本多数是我自己在思考然后自己搞定的，写这个博客的目的是在我写一些程序或者跟程序相关的东西的时候留下一些痕迹， 不写就有可能会像我python这里这边这样，用过3D的绘图但回过头来不知道文件夹放在哪了，甚至还很难搜到，干脆就写博客了就 目前计算机的布局 这是我目前造好的计算机，如下图\n寄存器 下面的是6个寄存器和一个输入，可以用来存储读取数据 DEC状态选择器 以及是DEC，模式选择器，选择当前计算机处于什么状态，主要是取决于从程序码中读取的8位状态数中的前两位，这两位组成一个 二进制数表示0到4，分别代表DEC的四个模式从上到下分别对应0-3，对应着四种读写模式，接下来会介绍四种模式\n四种模式 立即数模式 模式0是IMMEDIATE(立即数模式) ，它会读取后面的六位直接存储在reg0中，\n# 直接写数据会把程序码变成这个数,小于64时前两位数字都是0，立即数模式直接把1写入reg0 1 计算模式 接下来是模式1，计算模式，如箭头所示，reg1的输出会到ALU元件的输入1部分，reg2的输出会到ALU元件的输入2部分 其中ALU的输出通过一个二选一线连到了reg3的输入端，在模式是计算模式下，reg3的读写开关时打开的,至于ALU是什么在下一步处讲 现在可以理解为，输入1跟输入2经过ALU的一翻操作之后输出变成了reg3的值，这些都是基于先前给的指令集添加的功能，以下是之前的游戏要求，也就是 现在已经实现了的东西，指令码是最后三位\n在这个基础上,我新增了两数相乘的功能，也就是现在写着的unused的地方，现在已经这个按键位置可以实现乘法的功能了\n以及，这个指令的操作意味着，我先设定好reg2和reg1的值之后，我只要输入这个指令就可以把以上能得到的结果输入到reg3，至于怎么设定reg1和reg2的值后面会说\n复制模式 再然后是模式2,copy模式，数字复制模式，这个指令会执行的操作是从前三位指代的寄存器的位置复制数值到后三位指代的寄存器上 也有特殊的，三位值如果指代的是6，也就是110的状态下，左侧三位指代的输入，右侧三位指代的输出\n条件判断模式 模式3，条件判断模式，条件是否满足如上，检测到reg3是否满足条件，满足后把reg0的值输入到程序的计数器内，也就是 可以实现跳转功能\n汇编 可以为你已经有的指令创建一个别名，然后在程序中执行时，这个别名会被对应的指令数字替换，这样做可以增加 代码的可读性，让你知道当前代码什么意思，也就构成了现在的汇编代码编辑器的页面现在已有的东西，其中立即数模式不需要汇编，因为当前两位是0的时候后面的作为数字直接进入reg0. 计算模式直接写对应的模式的英文，比如add，当然，在执行汇编命令add，也就是68之前，需要将reg1和reg2赋值完毕再计算 如果没赋值就进行计算在多数情况下没有意义，至于复制模式，已经将相当多的指令直接指定好汇编别名了，现在能看到的基本都是以 哪to哪的格式进行命名的，至于第四个条件模式，一般用于代码的循环吧，等于是重新跳转到哪里执行，会在下面一个模块中描述，目前定义了 if_reg3_not0,也就是reg3不等于0，以及一个always命令，见条件判断模式中的100\n基础已经能实现的一些功能 综上，已经明白reg0到reg3都是已经有功能附加在身了，能自由控制的也就是reg4和reg5的值了，先说一个可类似for循环的操作， 先定义一个数，到reg4比如说，初始化可以通过立即数模式加复制模式完成，下面是举例\n4 reg0_to_reg4 现在以及执行的命令有，我先将10赋值给reg0，然后再把reg0(10)的值赋值给reg4，从而完成了循环数的初始化 再有就是条件变动了，因为几乎所有的条件几乎都围绕着0附近展开的，所以一般情况下的循环就是从你定义了一个数，慢慢 下降，到0为止，停止跳转操作：\n跳转操作，修改的计数器的位置，等同于修改了下一个要执行的程序命令，比如说条件成立之后，我计数器变为3，原来是10再次碰上跳转时依旧会跳转到3 那么如果我加入一个条件数进行限制呢？一定条件下不运作了，最简单的实现就是，一个数，每次操作完都减一，然后等到0的时候停止执行，这是可能的最简便的方法吧？ 事实上也是如此，当初我没写乘法运算器之前，也就是通过循环一个数直到它为0的操作来实现乘法的操作的，前面有关卡 实际也就是类似等同于python中以下的代码运算，但这里毕竟程序执行一次的时间肉眼可见，至少当时执行乘法的操作的时候 当时计算的很慢，也就是进行了一次时间换空间的操作，用循环数的方法，消耗了first_num倍率的时间，进行了一次乘法操作，我写的乘法器只需要一次的 计数器累加次数，相比下面部分完全写好的循环部分，多的是不少的计数器累加次数，实际上这就是计算机内部的时钟频率，基于时钟频率进行的执行各种程序操作\nsum_num = 0 first_num = 6 second_num = 4 for index in range(first_num): sum_num = sum_num + second_num 啰嗦了不少东西，现在完善一下以上曾经实现的类似上面python代码的操作，已经提到初始化好loop_num了\nlabel loop # 初始化减数(操作数1对操作数2进行操作，顺序是如此定的，比如4-1，第二位就是1) 1 reg0_to_reg2 label会标记当前行的行号,比如说这里是第四个代码执行行（注释操作并不会占用代码执行行，会被忽略） label的定义的关键字是loop，也就是，后面如果读到是loop的话，就输出4，一般我的习惯性操作就是，把reg0的值复制到reg3来，然后 直接让reg3判断是否已经满足条件，如果条件满足，那就是进行跳转，但执行if_reg_not0的时候reg3已经有数值了，所以 loop得放到if_reg_not0前面,继续上述代码\nreg5_tor_reg1 in_to_reg2 # 执行加法操作，被加数是输入数 add # 执行完后把输出数复制回reg5 reg3_to_reg5 # 输出循环数行到reg0 # 复制reg4到reg1 reg4_to_reg1 # 执行减法操作，并将输出值赋值给reg3 sub # 输出完刚好直接检验减完1之后的值是否是0 # 先初始化好reg0的值，如果reg3条件成立就跳转到label loop那行执行 loop # 判断！ if_reg3_not0 # 如果执行完毕，输出reg5累加数 reg5_to_out 关卡密码锁 \u0026mdash;2025 02 06记录 看到第一想法是，想组织二分法去快速取值了，但想想简单吧还是遍历简单，所以准备 直接写两个程序，一个遍历一个二分法取值,以下是从游戏内汇编代码编辑器中拷贝过来的代码，但现在转念一想，我好像， 如果使用二分法得写一个除法程序，先放一放，得思考一下除法程序的思路，以及是除数为0的报错处理方法，但先放着了，后面再说， 以下是目前的遍历代码\n# put in every num to the output 1 reg0_to_reg2 0 reg0_to_reg4 reg4_to_out label output_loop reg4_to_reg1 add reg3_to_reg4 reg4_to_out output_loop always \u0026mdash;2025 02 09记录 需要对一个数模4的结果等效于 4 % 3 ","date":"2025-02-06T10:07:57+08:00","image":"https://adeepblue.github.io/p/%E5%9B%BE%E7%81%B5%E5%AE%8C%E5%A4%87%E6%B8%B8%E6%88%8F%E6%94%BB%E7%95%A5/Logo_hu_d5fbe56439ec0fec.png","permalink":"https://adeepblue.github.io/p/%E5%9B%BE%E7%81%B5%E5%AE%8C%E5%A4%87%E6%B8%B8%E6%88%8F%E6%94%BB%E7%95%A5/","title":"图灵完备游戏攻略"},{"content":"CMD一些命令介绍 先新建一个cmd窗口，可以使用Win + R打开运行窗口中输入cmd打开，也可以在地址栏输入cmd打开cmd窗口，如下,不过还是第二种方法常用，因为第一种需要重新切换目录， 除非你只是需要开一个cmd窗口，第二种可以基于当前环境下开cmd窗口，运行窗口打开的cmd，通常是基于你的用户名的 C:\\Users\\Deepblue\u0026gt;你当前登录的用户是什么，一般就会显示在这，至于地址栏开启的，比如上面从文件资源管理器的地址栏打开的，打开显示的页面就是 E:\\personal-blog\\personal-blog\u0026gt;基于当前页面的窗口，也叫工作目录\n切换目录，创建目录，创建文件，查看当前目录下的文件 dir 用于显示你当前目录下的文件和文件名以及其他一些详细信息的 一些我用的多的参数：\n/s:你可以通过跟上/s的方式递归查看它的所有子目录里的文件 /b:忽略其他的输出信息 如果后面跟一些类正则的表达式则可以搜索目录下的一些文件或者目录，一般我平常习惯用的就是文件资源管理器下打开这个，然后用dir [给定的搜索条件] /s/b来搜索自己想要的文件 举个例子:\ndir *.apk /s/b 表示搜索当前目录下的以apk结尾的文件，其中*表示通配一切字符，跟正则库不太一样的是，这里直接就是*，而要调用正则的话则是.*,后者.表示统配一切字符，然后*表示若干前面前面的字符 不限制数量，有多少匹配多少，前者也表示这个意思，所以说，如果你需要查找什么带某个字符的文件名，比如说我只记得这个软件的部分文件名，就可以这样做\nE:\\软件\u0026gt;dir *spacesniffer* /s/b E:\\软件\\spacesniffer_1_3_0_2 E:\\软件\\spacesniffer_1_3_0_2\\SpaceSniffer.exe E:\\软件\\文件索引、扫描工具\\spacesniffer_1_3_0_2 E:\\软件\\文件索引、扫描工具\\spacesniffer_1_3_0_2.zip E:\\软件\\文件索引、扫描工具\\spacesniffer_1_3_0_2\\SpaceSniffer.exe E:\\软件\\资源类软件\\spacesniffer_1_3_0_2.zip cd 假设我当前工作目录如下 E:\\personal-blog\\personal-blog\u0026gt; 其中打开dir查看了一眼这个目录下的所有文件，如下，然后，我想让工作目录切换到已经标记了assets的文件夹，那么直接在命令行输入 cd assets就可以切入assets目录了\nE:\\personal-blog\\personal-blog\u0026gt;dir 驱动器 E 中的卷是 980 卷的序列号是 B407-DA03 E:\\personal-blog\\personal-blog 的目录 2025/02/09 15:41 \u0026lt;DIR\u0026gt; . 2025/02/09 15:41 \u0026lt;DIR\u0026gt; .. 2025/02/09 12:59 \u0026lt;DIR\u0026gt; assets REM --此处文件夹已经被删去多处，为了节省显示空间-- 4 个文件 7,917 字节 12 个目录 245,086,658,560 可用字节 观察到前缀显示多了assets即表示成功切入，补充一点，cmd有补全机制，会识别你当前的参数部分是否是当前文件文件夹下的，比如说这里可能 敲个ass再按tab就可以补全assets文件夹的全称了,也可以同时串起切入多个文件目录，比如说cd ./assets/scss，切入多个嵌套并没有任何影响\nE:\\personal-blog\\personal-blog\u0026gt;cd assets E:\\personal-blog\\personal-blog\\assets\u0026gt; 如果需要回退父目录，比如说上面这段我想切到E:\\personal-blog\\personal-blog文件目录，则只需要敲入 cd .. 即可切出\n创建文件和创建目录 mkdir\n在当前目录下创建一个文件夹，记得复制完文件目录以后把斜杠改成反斜杠，起初我以为是用斜杠/来实现分割目录，结果后面发现是反斜杠，就，挺不方便的，得稍微注意一点，其中 mkdir .\\a\\b\\c\\d可以递归创建文件，也就是，当前并不存在a以及下面的所有目录，这一行命令就可以一次性创建所有使得cd .\\a\\b\\c\\d可以直接访问了\n基于当前目录下创建 ~.\\a\\b\\c\\d的目录\ntouch 同样的文件分割方式，创建文件可以用touch函数 touch .\\a\\b\\c\\d\\e.txt 但注意，创建的是空文件，一般结合mkdir使用\n打印输出，定义变量和环境变量 echo\n顾名思义，类似于python中print的功能 语法则是echo [输出内容]，如果输出内容包含空格，需要英文双引号包裹输出内容两侧 set\n可以临时定义变量，set \u0026quot;a=1\u0026quot;不过需要被包裹在双引号里面，调用的时候需要%a%来调用即可，比如说echo %a%,也可在%a%前后加入内容，比如说\u0026quot;echo 1-%a%\u0026ldquo;输出1-1\n环境变量 一般情况下，你输入其他目录的文件，通常cmd不会给出回应，但如果你将目标目录的文件夹路径添加到环境变量后，那么你就可以访问了，比如说你添加了hugo的源目录 D:\\hugo_extended_withdeploy_0.143.0_windows-amd64,其中下面有hugo.exe 那么你直接通过cmd敲入hugo相关的相关的命令即可在当前目录下使用hugo了， 很多时候这相当有用，其中环境变量可以通过win+S呼出搜索框然后输入环境变量打开对应的设置选项即可，而我，我更懒，我直接新建了一个快捷方式，填入了C:\\Windows\\System32\\SystemPropertiesAdvanced.exe 并把快捷方式命名成了environment，然后把这个快捷方式加入了环境变量，然后，我就可以很方便的通过win R运行框中输入environment进行直接打开环境变量属性框了 尤其是配合历史记录的情况下，如果你上一次打开的是cmd，这次你不输入任何值默认就会显示cmd，以及如果发现这个功能没了请去设置内开启下列图片中的开关，即可使用这个功能了 一定的写入方法 一般cmd环境下，如果你想把一部分内容直接输入到某个文件上，可以通过以下命令实现\ncommand_output \u0026gt; 1.txt\n例如下面这个命令\ndir *spacesniffer* /s/b \u0026gt;1.txt\n下面是原本的输出的内容，但是一旦加上了\u0026gt;1.txt后，所有的输出都被截断，命令行不显示输出，取而代之把输出写入了当前工作目录的1.txt文件中，注意，这个文件也可以不存在，这一行命令会自动新建1.txt文件\nE:\\软件\u0026gt;dir *spacesniffer* /s/b E:\\软件\\spacesniffer_1_3_0_2 E:\\软件\\spacesniffer_1_3_0_2\\SpaceSniffer.exe E:\\软件\\文件索引、扫描工具\\spacesniffer_1_3_0_2 E:\\软件\\文件索引、扫描工具\\spacesniffer_1_3_0_2.zip E:\\软件\\文件索引、扫描工具\\spacesniffer_1_3_0_2\\SpaceSniffer.exe E:\\软件\\资源类软件\\spacesniffer_1_3_0_2.zip 其他用途 在我的手里，一般cmd是一个默认的启动器吧，比如如果不希望启动pycharm这么个庞然大物去运行某个python脚本的话，一般可以通过\n@echo off python python-script.py 这样的方法去启动某个脚本，也省去了你敲命令的时间，比如隔壁git教程那一侧git教程\n@echo off cd .. cd personal-blog hugo git add . set \u0026#34;year=%date:~0,4%\u0026#34; set \u0026#34;month=%date:~5,2%\u0026#34; set \u0026#34;day=%date:~8,2%\u0026#34; set \u0026#34;formatted_date=%year%-%month%-%day%\u0026#34; git commit -m \u0026#34;Upload file in %formatted_date%\u0026#34; git push -u origin main pause 其中@echo off为关闭回显状态，也就是不显示E:\\personal-blog\\personal-blog\u0026gt;这个以及命令本身，但不会关闭这个命令本身的输出，pause会使得命令不会跑完就命令窗口消失\n一些杂谈 一般bat脚本被用来直接用foru循环的还是少，一般会被用来作一些简单的启动，比如启动python执行某个脚本什么的，这种比较方便，虽然有for循环 但对比其他语言来说，实在有点眼花缭乱，一般用AI去问问就差不多了，我不喜欢在cmd命令里用for循环，在里面定义读取个变量很多时候也够呛， 但也不否认，如果用它写一些简单的东西，可以省去很多的重复劳动，做到一定的自动化，这一点我还是比较喜欢的\n","date":"2025-02-04T22:34:00+08:00","image":"https://adeepblue.github.io/p/cmd%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D/CommandLineIcon_hu_92fdb1cf55bf8472.png","permalink":"https://adeepblue.github.io/p/cmd%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D/","title":"Cmd命令介绍"},{"content":"Hugo笔记 首先是先下载hugo,我的话因为后面可能命令行会比较常用，所以手动把它添加进了环境变量 path里面 也是有这个步骤才可以下面直接hugo命令直接用了\n前前后后也搞了不少时间，万一以后文件丢失了可以来这边参考我自己写的hugo笔记\n建站 新建站点 命令如下\nhugo new site personal-blog\n此处personal-blog可替换文件夹名字，会自动新建文件夹然后在该文件夹下放初始化的内容\n新建页面 新建完网站本身之后就可以开始写md文件了，比如此处我新建了hugo/hugo-init.md文件，命令如下\nhugo new hugo/hugo-init.md\n命令行返回为\nE:\\personal-blog\\personal-blog\u0026gt;hugo new git/git-init.md Content \u0026#34;E:\\\\personal-blog\\\\personal-blog\\\\content\\\\git\\\\git-init.md\u0026#34; created 但一般推荐写文章在./content/post/foldername/index.md下，其中用文件夹名用标识内容方便自己后续区分，比如说例如这篇文章就在./content/post/hugo/index.md下，因为默认hugo识别文章一般 会去./content/post/文件夹下找md文件，例如我的文件结构如下\n├─categories │ └─Test ├─page │ ├─about │ └─search └─post ├─cmd ├─git ├─hugo ├─python-matplotlib ├─test └─turing-complete 其他page和categories文件夹我没去管，等到文章写多了才会利用那些整一整\nmd文件头和文件内容 再有就是自带的文件头，\n+++ date = \u0026#39;2025-02-04T21:10:15+08:00\u0026#39; draft = false title = \u0026#39;Test\u0026#39; +++ 原本draft中的值是true,需要改成false才能进行页面发布 ，可能是因为类似审核的过程？方便管理确认？亦或者说不想显示 某篇文章先用这种方式隐藏起来？虽然也只是我的猜测而已罢了\n# 文章标题 这是你的主要内容部分。你可以在这里添加文本、列表、引用、图像等。 ## 子标题 ### 列表示例 - 第一项 - 第二项 - 第三项 ### 引用示例 \u0026gt; 这是一个引用的例子。 ### 图片示例 ![图片描述](图片链接) ### 代码示例 `ssh git@github.com` 一般文件结构介绍 以及是，content目录下必须包含_index.md文件，不然会不显 示主页，这就是主页， 命令可以以下方法实现\nhugo new _index.md 但一般如果是用的第三方主题可以把exampleSite文件夹中的content和hugo.yaml文件拉出来，其中的content文件夹就包含了_index.md，这样也就不用自己写了 除非是要自己构建主题，那就得自己新建_index.md布局文件\n然后我目前打算添加的代码，虽然已经弃用（用第三方主题了）\n--- menu: main: name: 主页 weight: -100 params: icon: home --- 曾遇到的问题 目前git处文章不显示，未知原因，起初发现draft=true没修改，但目前不清楚因为什么导致不显示\n总觉得hugo挺多bug的，之前有404过不少时间，调试了很久重新开始hugo new site personal-blog 然后重建git仓库，弄了许久没弄好，现在又出现hugo new post/cmd/index.md没法创建 疑似可能是因为hugo server正在启动无法使用new命令吧\n写的文markdown文件如果不是index.md的话会出现头字段(front matter)image字段图片加载失败的问题\n修改背景图片 也奇怪，一开始没搞定背景图片，这次一遍过了，下面这条命令是创建文件夹的命令，在网站根目录打开cmd运行\nmd .\\assets\\background\n然后在这个文件夹内放背景图片后，运行以下命令创建\nmd .\\layouts\\partials\\footer touch .\\layouts\\partials\\footer\\custom.html 并将以下代码直接放入上面新建的custom.html内部\n\u0026lt;style\u0026gt; body { background: url({{ (resources.Get \u0026#34;background/背景图片名\u0026#34;).Permalink }}) no-repeat center top; background-size: cover; background-attachment: fixed; } \u0026lt;/style\u0026gt; 此处感谢莱特雷-letere大佬的博客指引网页链接\n代码高亮 呃啊，折腾了一两天的代码高亮，我以为被原始的样式覆盖了，折腾了很久都没搞好，结果一删AI生成的代码立马好了，我无法接受啊啊啊啊\n不推荐用 npm install highlight.js的方式安装，我安装完少了highlight.min.js文件\nhighlight.min.js放在./assets/js/目录下， styles文件夹复制出来改文件名成highlight-styles后放在/assets/css/目录下，如下 虽然我也没搞懂是什么个情况就稀里糊涂的搞好了，其中hugo.yaml中的配置如下\nhighlight: noClasses: false codeFences: true guessSyntax: true lineNoStart: 1 lineNos: false lineNumbersInTable: false tabWidth: 4 style: monokai # noHl: true 至此，莫名其妙的搞定了，本人也是hugo新手，其他人博客的很简便写的东西没怎么看懂，奈何html水平不够，写这些在这方便参考\n加入图片 ![图片说明](图片链接) 也可以直接插入HTML片段，比如直接在markdown环境下输入这个调整图片的大小，markdown的另一种调整方式疑似在stack主题下或者说hugo环境下不可用，不过我并没有做过测试就是\n{\\{\u003c figure src=\"picture.png\" width=\"400px\" height= \"340px\" title=\"title\" align=\"left\" \u003e\\}\\} 不过最后的align参数貌似没什么用就是了，是从网上看来的\n下面是hugo环境下不可用的写法,至少我目前测试是不可用的\n![图片说明](picture.jpg?fit=200x100) 标记文字 标记方法如下 \u0026lt;span style=\u0026quot;color:blue\u0026quot;\u0026gt;标记方法如下\u0026lt;/span\u0026gt;这样标蓝就行\n也可以插入div表示一个块 居中且标红的 HTML。 其中上面的代码如下 \u0026lt;div class=\u0026#34;myclass text-danger\u0026#34; style=\u0026#34;text-align:center;color :red;\u0026#34;\u0026gt; 居中且标红的 \u0026lt;u\u0026gt;HTML\u0026lt;/u\u0026gt;。 \u0026lt;/div\u0026gt; 图表绘制 x 1 2 3 4 5 6 7 y 1 0 -1 -2 -3 -4 -3 x 1 2 3 4 5 6 7 x 1 2 3 4 5 6 8 这样的图表应该怎么绘制呢？看以下源代码，其中第二行得标识对齐，其中-这个符号即是表示这一列的长度最长的显示位数 不得多于对应的长度，比如说如果只有一个-，就不能输入-1了，要表示-1必须在第二行对齐处多加一个-,也就是\u0026ndash; 其中单左冒号表示左对齐，单右冒号表示右对齐，两边都有则是居中，一般markdown中输入会跟随你的最长的数字，已经组好表格的 情况下，你如果在这一位插入数字会自动帮你添加-，但删到数字没有了记得补上-,因为你把文本删光了对应上面也就没有-了， 需要手动去调整 | x | 1 | 2 | 3 | 4 | 5 | 6 | 7 | |:-:|:-:|:-:|:--:|:--:|:--:|:--:|:--:| | y | 1 | 0 | -1 | -2 | -3 | -4 | -3 | | | | | | | | | | | x | 1 | 2 | 3 | 4 | 5 | 6 | 7 | | x | 1 | 2 | 3 | 4 | 5 | 6 | 8 | x 1 2 3 4 5 6 7 y 1 0 -1 -2 -3 -4 -3 x 1 2 3 4 5 6 7 x 1 2 3 4 5 6 8 链接css样式表进页面 因为我当时要改左侧样式表的页面，因为完全没有颜色会让左侧标签栏变得看不到，如下，我选择了加入伪元素达到类似蒙版的效果 因为deepseek给出的文件放置位置错误，当时它提示我放在./assets/css/custom.css中调用，调用的时候只需要调用/css/custom.css就行了， 结果没生效，到头来是在./static/css/custom目录下调用成了,参考了网页链接这篇文章 ","date":"2025-02-04T22:34:00+08:00","image":"https://adeepblue.github.io/p/hugo%E5%88%9D%E5%A7%8B%E5%8C%96%E7%BD%91%E7%AB%99%E7%AC%94%E8%AE%B0/Logo_of_Hugo_the_static_website_generator.svg_hu_4d8ab91ad958cac5.png","permalink":"https://adeepblue.github.io/p/hugo%E5%88%9D%E5%A7%8B%E5%8C%96%E7%BD%91%E7%AB%99%E7%AC%94%E8%AE%B0/","title":"Hugo初始化网站笔记"},{"content":"Git连接踩坑记录 配置SSH 重装电脑之后（并不重装D盘），git又连不上GitHub了，也不知道是出了什么毛病， 昨晚连接SSH都连不上，我只依稀记得以前踩了许多坑，再回过头来 捣鼓又是估计好一番功夫了，所以在这写下这篇文章为以后的我参考，方便以后快速配置 ssh -T git@github.com\nssh -vT git@github.com (加了v之后会输出调试信息)\n也疯狂报错 报错信息如下\n$ ssh -T adeepblue@github.com /usr/bin/bash: line 1: exec: nc: not found Connection closed by UNKNOWN port 65535 报错查找 但我依稀记得我当时折腾ssh和GitHub的时候没用nc代理工具，这回莫名奇妙有这个报错了 曾经的目录长这样\nC:\\Users\\Deepblue\\.ssh\u0026gt;dir /b authorized_keys id_ed25519 id_ed25519.pub id_rsa.pub id_rsa_2048 known_hosts testpub config 最后对比曾经重装电脑留下的备份文件发现多了一个config，然后点进去发现这玩意居然 显示要nc的配置什么的，幡然醒悟，哦，ssh出问题原来就是你这个文件捣的鬼，\n文件内容如下:\nHost github.com User git ProxyCommand nc -v -x 127.0.0.1:4780 %h %p 如果我当初没有备份目录我可能都没意识到，一删 除这个文件之后ssh -T git@github.com立马可以通了，也是给我整无语了\n初始化仓库 仓库的配置，先需要初始化仓库 git init REM 新建并切到主分支（此处为cmd的备注方式） git checkout -b main REM 添加所有文件到git暂存区 git add . REM 提交到分支 git commit -m \u0026#34;提交信息,比如init\u0026#34; REM 配置代理，以我电脑上目前的科学上网工具为例，本地环路端口号为4780 git config --global http.proxy http://127.0.0.1:4780 git config --global https.proxy https://127.0.0.1:4780 REM git 添加你的仓库，此处不带git，因为我使用了SSH配置，所以也使用SSH的方式 REM 推送另一种方式我没用所以此处不写 REM 初次添加使用add，如果是一不小心输入错误需要修改就用第二条命令 set-url参数的 git remote add origin https://github.com/Adeepblue/adeepblue.github.io git remote set-url origin git@github.com:Adeepblue/adeepblue.github.io REM 推送，如果本地分支跟远程分支不同可使用-f参数强制推送 git push -f origin main / git push origin main --force 以上，调试完毕\ngit add -f public git commit -m \u0026#34;Publish site\u0026#34; git subtree push --prefix public origin gh-pages 以及，现在的hugo推送，这样就可以推送到gh-pages分区进行展示了，需要GitHub修改一下仓库设置 仓库迁移 最近自动化上传的时候遇到了这么个提示，也就是上面配置这边原始的命令那，git得补上了，我也不知道为什么，至少它现在提示了\nremote: This repository moved. Please use the new location: remote: git@github.com:ADeepblue/adeepblue.github.io.git 然后我现在就用一行命令移动过去了\ngit remote set-url origin git@github.com:ADeepblue/adeepblue.github.io.git 自动化部署 我给一个我目前在用的自动化部署方案吧，我现在的仓库根目录是E:\\personal-blog\\personal-blog,我配置了我的自动化目录在E:\\personal-blog\\automatical-test 这里并不是git仓库的一部分，所以这个文件并不会上传，但是我分享在这里吧，仅作为参考，如果需要解析请移步隔壁cmd教程cmd命令介绍\nREM E:\\personal-blog\\automatical-test\\推送主分支.bat @echo cd .. cd personal-blog hugo git add . set \u0026#34;year=%date:~0,4%\u0026#34; set \u0026#34;month=%date:~5,2%\u0026#34; set \u0026#34;day=%date:~8,2%\u0026#34; set \u0026#34;formatted_date=%year%-%month%-%day%\u0026#34; git commit -m \u0026#34;Upload file in %formatted_date%\u0026#34; git push -u origin main pause REM E:\\personal-blog\\automatical-test\\发布文章.bat @echo off setlocal rem 从 %date% 按位置提取年月日（假设格式固定为 YYYY/MM/DD） set \u0026#34;year=%date:~0,4%\u0026#34; set \u0026#34;month=%date:~5,2%\u0026#34; set \u0026#34;day=%date:~8,2%\u0026#34; set \u0026#34;formatted_date=%year%-%month%-%day%\u0026#34; cd .. cd personal-blog git add -f public git commit -m \u0026#34;Publish site %formatted_date%\u0026#34; git subtree push --prefix public origin gh-pages pause 免责声明 脚本仅供学习参考：本文中分享的自动化脚本仅供个人学习和参考使用，不保证适用于所有环境或符合所有公司的规范和要求。 使用风险自负：在使用本文中的脚本时，请确保您已充分了解其功能和潜在风险。如果您在公司环境中使用该脚本，请务必根据公司的相关规定和要求进行修改和调整。因使用该脚本导致的任何问题或损失，作者概不负责。 遵守公司规定：如果您在公司环境中使用该脚本，请务必遵守公司的相关规定和要求。例如，提交信息的格式、仓库的命名规范等。因未遵守公司规定而导致的任何问题或纠纷，作者概不负责。 自行测试和验证：在将该脚本应用于实际工作环境之前，请务必在测试环境中进行充分的测试和验证，以确保其符合您的需求和环境要求。 ","date":"2025-02-04T21:39:19+08:00","image":"https://adeepblue.github.io/p/git%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%B0%E5%BD%95/git-bash.svg","permalink":"https://adeepblue.github.io/p/git%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%B0%E5%BD%95/","title":"Git初始化记录"}]